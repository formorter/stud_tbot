import os
import asyncio
import requests
from utils.misc.logger import logger as log
from database import Schedule
from datetime import datetime
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from loader import dp, bot
from anecdot import Anecdot
"""handler –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–∞—Ä–∞—Ö"""

chat_ids = {}

anecdots = Anecdot()

def is_upper_week() -> bool:
    r = requests.request(method='GET', url='http://studydep.miigaik.ru/')
    if r.ok:
        week = r.text.split('–Ω–µ–¥–µ–ª—è:')[1].split()[0]
        if week == "–ù–∏–∂–Ω—è—è":
            return False
        elif week == "–í–µ—Ä—Ö–Ω—è—è":
            return True
        else:
            raise Exception('Parse error!')

@dp.message_handler(CommandStart())
async def echo(message: types.Message):
    """–ë–µ–∑–¥–∞—Ä–Ω—ã–π –ª–æ–≥"""
    # print('message handler') # debug
    # log.info(f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.chat.id}, {message.from_user}, {chat_ids}') # debug
    if chat_ids.get(message.chat.id, None):
        chat_ids[message.chat.id] = chat_ids[message.chat.id].append(message.from_user)
    else:
        chat_ids[message.chat.id] = [message.from_user]
        log.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{message.chat.username}, id={message.chat.id}] –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è')
        log.info(f'Connected users: {chat_ids}')
    # text = f'{message.message_id} {message.from_user} {message.text}'
    # msg = await message.reply('–ü—Ä–∏–≤')


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    await bot.delete_message(chat_id=os.getenv('GROUP_ID'), message_id=message.message_id)
    log.info('–°–æ–æ–±—â–µ–Ω–∏–µ {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'.format(message.message_id))


async def periodic(sleep_for):  # –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
    upperWeek = is_upper_week()
    while True:
        await asyncio.sleep(sleep_for)
        now = datetime.now()
        day_of_week = now.strftime('%A')
        if day_of_week == 'Monday' and datetime.strftime(now,"%H:%M") == '00:00':
            upperWeek = is_upper_week()
        for lesson in Schedule.select():
            if lesson.date == f'{now}, {day_of_week}' and lesson.isUpperWeek == upperWeek:
                msg = await bot.send_message(os.getenv('GROUP_ID'), f"üòà {anecdots.get_random()} üòà\n"
                                                    f"\n –ü–∞—Ä–∞ {lesson.name} —É {lesson.teacher} "
                                                    f"\n —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {lesson.link}",
                                                    disable_notification=True)
                log.info(datetime.strftime(now, "%H:%M"), f'{lesson.name} - –í–´–í–ï–î–ï–ù')
                asyncio.create_task(delete_message(msg, 600))
        log.info(f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞')